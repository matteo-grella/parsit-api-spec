// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ParsitApiSpecServiceClient is the client API for ParsitApiSpecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParsitApiSpecServiceClient interface {
	// Receives a text in Italian and returns its morpho-syntactic structure
	PostForParsing(ctx context.Context, in *PostForParsingRequest, opts ...grpc.CallOption) (*Response, error)
}

type parsitApiSpecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParsitApiSpecServiceClient(cc grpc.ClientConnInterface) ParsitApiSpecServiceClient {
	return &parsitApiSpecServiceClient{cc}
}

func (c *parsitApiSpecServiceClient) PostForParsing(ctx context.Context, in *PostForParsingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/parsit_api_spec.ParsitApiSpecService/PostForParsing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParsitApiSpecServiceServer is the server API for ParsitApiSpecService service.
// All implementations must embed UnimplementedParsitApiSpecServiceServer
// for forward compatibility
type ParsitApiSpecServiceServer interface {
	// Receives a text in Italian and returns its morpho-syntactic structure
	PostForParsing(context.Context, *PostForParsingRequest) (*Response, error)
	mustEmbedUnimplementedParsitApiSpecServiceServer()
}

// UnimplementedParsitApiSpecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParsitApiSpecServiceServer struct {
}

func (UnimplementedParsitApiSpecServiceServer) PostForParsing(context.Context, *PostForParsingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostForParsing not implemented")
}
func (UnimplementedParsitApiSpecServiceServer) mustEmbedUnimplementedParsitApiSpecServiceServer() {}

// UnsafeParsitApiSpecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParsitApiSpecServiceServer will
// result in compilation errors.
type UnsafeParsitApiSpecServiceServer interface {
	mustEmbedUnimplementedParsitApiSpecServiceServer()
}

func RegisterParsitApiSpecServiceServer(s grpc.ServiceRegistrar, srv ParsitApiSpecServiceServer) {
	s.RegisterService(&_ParsitApiSpecService_serviceDesc, srv)
}

func _ParsitApiSpecService_PostForParsing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostForParsingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParsitApiSpecServiceServer).PostForParsing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parsit_api_spec.ParsitApiSpecService/PostForParsing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParsitApiSpecServiceServer).PostForParsing(ctx, req.(*PostForParsingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParsitApiSpecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parsit_api_spec.ParsitApiSpecService",
	HandlerType: (*ParsitApiSpecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostForParsing",
			Handler:    _ParsitApiSpecService_PostForParsing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
